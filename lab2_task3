"""
Module for working with artists and their songs in Spotify
"""
import json
import base64
from requests import post, get
from flask import Flask, render_template, request, redirect, url_for
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderUnavailable
import folium
import pycountry

CLIENT_ID = "8b268ec6134a4118974e80e14b0e2152"
CLIENT_SECRET = "bb837606dd17488a97d5d5a5417a474e"

def get_token():
    """
    Function for getting token from client id and secret
    """
    auth_string = f"{CLIENT_ID}:{CLIENT_SECRET}"
    auth_base64 = base64.b64encode(auth_string.encode()).decode()

    url = 'https://accounts.spotify.com/api/token'
    auth_headers = {
        'Authorization': 'Basic ' + auth_base64,
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    auth_data = {'grant_type':'client_credentials'}
    result = post(url, headers = auth_headers, data = auth_data)
    json_result = json.loads(result.content)
    token = json_result['access_token']
    return token

def get_auth_header(token):
    """
    Function returns authorithation header for future requests
    """
    return {"Authorization": "Bearer " + token}

def search_for_artist(token, artist_name):
    """
    Function for getting artist's id
    """
    url = 'https://api.spotify.com/v1/search'
    headers = get_auth_header(token)
    query = f'?q={artist_name}&type=artist&limit=1'
    query_url = url + query
    result = get(query_url, headers=headers)
    json_result = json.loads(result.content)['artists']['items']
    if len(json_result) == 0:
        print('No artists with this name')
        return None
    return json_result[0]['id']

def get_song_id_by_artist_id(token, artist_id):
    """
    Function returns id of song
    """
    url = f'https://api.spotify.com/v1/artists/{artist_id}/top-tracks?country=UA'
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    song = json.loads(result.content)['tracks'][0]['name']
    song_id = json.loads(result.content)['tracks'][0]['id']
    return song, song_id

def get_markets(token, song_id):
    """
    Function returns available markets for song
    """
    url = f'https://api.spotify.com/v1/tracks/{song_id}?country=UA'
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    ava_market = json.loads(result.content)['available_markets']
    return ava_market

def get_coordinates(location_of_coutry):
    """
    Function returns coordinates of place, where movies were shot
    >>> get_coordinates('Los Angeles, USA')
    (34.0536909, -118.242766)
    >>> get_coordinates('Lviv, Ukraine')
    (49.841952, 24.0315921)
    """
    geolocator = Nominatim(user_agent="https://www.openstreetmap.org/copyright")
    try:
        location = geolocator.geocode(location_of_coutry)
        if not location:
            return None
    except (AttributeError, GeocoderUnavailable):
        return None
    return location.latitude, location.longitude


def create_map(artist):
    """
    Function for creating map
    """
    token = get_token()
    artist_id = search_for_artist(token, artist)
    song_id = get_song_id_by_artist_id(token, artist_id)[1]
    markets = get_markets(token, song_id)
    map = folium.Map(zoom_start=1)
    html = """
    Country: {} <br>
    """
    figure = folium.FeatureGroup(name='Available markets')
    for i in markets:
        country_coords = get_coordinates(i)
        if not country_coords:
            continue
        country_name = pycountry.countries.get(alpha_2=i)
        if country_name is None:
            continue
        iframe = folium.IFrame(html=html.format(country_name.name),
                            width=80,
                            height=50)
        figure.add_child(folium.Marker(location=[country_coords[0], country_coords[1]],
                popup=folium.Popup(iframe),
                icon=folium.Icon(color = "brown", icon="fa-music", prefix="fa")))
        map.add_child(figure)
    map.add_child(folium.LayerControl())
    return map._repr_html_()

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def get_artist():
    """
    Function returns name of artist
    """
    if request.method == 'POST':
        name_art = request.form.get('q')
        return redirect(url_for('info', artist=name_art))
    else:
        return render_template('button.html')

@app.route('/<artist>')
def info(artist):
    """
    Function for button
    """
    art = f'{artist}'
    return create_map(art)

if __name__ == '__main__':
    app.run(debug=True)
